/*
 * Copyright (c) 2010-2021 Allette Systems (Australia)
 *    http://www.allette.com.au
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.pageseeder.diffx.format;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.pageseeder.diffx.DiffException;
import org.pageseeder.diffx.api.LoadingException;
import org.pageseeder.diffx.load.SAXLoader;
import org.pageseeder.diffx.sequence.XMLSequence;
import org.pageseeder.diffx.token.impl.XMLAttribute;
import org.pageseeder.diffx.token.impl.XMLEndElement;
import org.pageseeder.diffx.token.impl.XMLStartElement;

import java.io.PrintWriter;
import java.io.StringWriter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.pageseeder.diffx.api.Operator.*;

/**
 * Test class for the smart XML Diff output.
 *
 * @author Christophe Lauret
 * @version 0.9.0
 */
public final class DefaultXMLDiffOutputTest {

  /**
   * The output being tested.
   */
  DefaultXMLDiffOutput output = null;

  /**
   * The string writer.
   */
  StringWriter w = null;

  @BeforeEach
  public void setUp() {
    this.w = new StringWriter();
    this.output = new DefaultXMLDiffOutput(this.w);
    this.output.start();
  }

  /**
   * Test open and closing an element.
   */
  @Test
  public void testOpenAndClose0() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(MATCH, new XMLEndElement("a"));
    assertEquivalentToXML("<a/>");
  }

  /**
   * Test open and closing mismatching elements.
   */
  @Test
  public void testOpenAndClose1() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(MATCH, new XMLEndElement("b"));
    assertEquivalentToXML("<a/>");
  }

  /**
   * Test open and closing mismatching elements.
   */
  @Test
  public void testOpenAndClose2() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(INS, new XMLEndElement("b"));
    assertEquivalentToXML("<a/>");
  }

  /**
   * Test open and closing mismatching elements.
   */
  @Test
  public void testOpenAndClose3() throws DiffException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(DEL, new XMLEndElement("b"));
    assertEquivalentToXML("<a/>");
  }

  /**
   * Test formatting an attribute.
   */
  @Test
  public void testAttributes0() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(MATCH, new XMLAttribute("", "x", "y"));
    this.output.handle(MATCH, new XMLEndElement("a"));
    assertEquivalentToXML("<a x='y'/>");
  }

  /**
   * Test formatting an attribute.
   */
  @Test
  public void testAttributes1() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(INS, new XMLAttribute("", "x", "y"));
    this.output.handle(MATCH, new XMLEndElement("a"));
    assertEquivalentToXML("<a x='y' ins:x='true' xmlns:ins='https://www.pageseeder.org/diffx/insert'/>");
  }

  /**
   * Test formatting an attribute.
   */
  @Test
  public void testAttributes2() throws LoadingException {
    this.output.handle(MATCH, new XMLStartElement("a"));
    this.output.handle(DEL, new XMLAttribute("", "x", "y"));
    this.output.handle(MATCH, new XMLEndElement("a"));
    assertEquivalentToXML("<a xmlns:del='https://www.pageseeder.org/diffx/delete' del:x='y'/>");
  }

// helpers ------------------------------------------------------------------------------------

  /**
   * Tests whether the content generated by the output is equivalent to the specified XML.
   *
   * @param xml The first XML to test.
   *
   * @throws LoadingException Should an error occur whilst parsing one of the XML files.
   */
  private void assertEquivalentToXML(String xml) throws LoadingException {
    // process the XML to get the sequence
    SAXLoader loader = new SAXLoader();
    XMLSequence exp = loader.load(xml);
    // process the output of the output
    XMLSequence seq = loader.load(this.w.toString());
    try {
      assertEquals(exp, seq);
    } catch (AssertionError ex) {
      PrintWriter pw = new PrintWriter(System.err);
      seq.export(pw);
      pw.flush();
      System.err.println(this.w.toString());
      throw ex;
    }
  }

}
