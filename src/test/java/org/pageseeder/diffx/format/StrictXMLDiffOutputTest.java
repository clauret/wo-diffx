/*
 * Copyright (c) 2010-2021 Allette Systems (Australia)
 *    http://www.allette.com.au
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.pageseeder.diffx.format;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.pageseeder.diffx.DiffXException;
import org.pageseeder.diffx.action.Operator;
import org.pageseeder.diffx.load.SAXRecorder;
import org.pageseeder.diffx.sequence.Sequence;
import org.pageseeder.diffx.token.impl.AttributeTokenNSImpl;
import org.pageseeder.diffx.token.impl.EndElementTokenNSImpl;
import org.pageseeder.diffx.token.impl.StartElementTokenNSImpl;
import org.pageseeder.diffx.util.Constants;
import org.xml.sax.InputSource;

import java.io.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Test class for the strict formatter.
 *
 * @author Christophe Lauret
 * @version 0.9.0
 */
public final class StrictXMLDiffOutputTest {

  /**
   * The namespace declaration.
   */
  private static final String XML_DECL = "<?xml version=\"1.0\" encoding=\"utf-8\"?>";

  /**
   * The namespace declaration.
   */
  private static final String NS_DECL = "xmlns:dfx=\"" + Constants.BASE_NS_URI + '"';

  /**
   * The loader being tested.
   */
  private final SAXRecorder recorder = new SAXRecorder();

  /**
   * The formatter being tested.
   */
  private XMLDiffOutput output = null;

  /**
   * The string writer.
   */
  private StringWriter w = null;

  @BeforeEach
  public void setUp() {
    this.w = new StringWriter();
    this.output = new StrictXMLDiffOutput(this.w);
  }

//opening and closing elements ---------------------------------------------------------------

  /**
   * Test open and closing an element.
   *
   * @throws DiffXException Should an error occur whilst parsing one of the XML files.
   * @throws IOException    Should an I/O error occur.
   */
  @Test
  public void testOpenAndClose0() throws DiffXException, IOException {
    this.output.handle(Operator.MATCH, new StartElementTokenNSImpl("a"));
    this.output.handle(Operator.MATCH, new EndElementTokenNSImpl("a"));
    assertEquivalentToXML("<a/>");
    String xml = XML_DECL + "<a " + NS_DECL + "></a>";
    assertEquals(xml, this.w.toString());
  }

// playing with attributes --------------------------------------------------------------------

  /**
   * Test formatting an attribute.
   *
   * @throws DiffXException Should an error occur whilst parsing one of the XML files.
   * @throws IOException    Should an I/O error occur.
   */
  @Test
  public void testAttributes0() throws DiffXException, IOException {
    this.output.handle(Operator.MATCH, new StartElementTokenNSImpl("a"));
    this.output.handle(Operator.MATCH, new AttributeTokenNSImpl("", "x", "y"));
    this.output.handle(Operator.MATCH, new EndElementTokenNSImpl("a"));
    assertEquivalentToXML("<a x='y'/>");
    String xml = XML_DECL + "<a " + NS_DECL + " x=\"y\"></a>";
    assertEquals(xml, this.w.toString());
  }

// helpers ------------------------------------------------------------------------------------

  /**
   * Tests whether the content generated by the formatter is equivalent to the specified XML.
   *
   * @param xml The first XML to test.
   *
   * @throws DiffXException Should an error occur whilst parsing one of the XML files.
   * @throws IOException    Should an I/O error occur.
   */
  private void assertEquivalentToXML(String xml) throws DiffXException, IOException {
    // process the XML to get the sequence
    Reader xmlr = new StringReader(xml);
    Sequence exp = this.recorder.process(new InputSource(xmlr));
    // process the output of the formatter
    Reader xmlr2 = new StringReader(this.w.toString());
    System.err.println(this.w.toString());
    Sequence seq = this.recorder.process(new InputSource(xmlr2));
    try {
      assertEquals(exp.size(), seq.size());
      assertEquals(exp, seq);
    } catch (AssertionError ex) {
      PrintWriter pw = new PrintWriter(System.err);
      seq.export(pw);
      pw.flush();
      throw ex;
    }
    System.err.println(this.w.toString());
  }

}

