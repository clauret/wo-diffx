/*
 * Copyright 2010-2015 Allette Systems (Australia)
 * http://www.allette.com.au
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.pageseeder.diffx.handler;

import org.pageseeder.diffx.action.Action;
import org.pageseeder.diffx.action.Operator;
import org.pageseeder.diffx.token.Token;

import java.util.ArrayList;
import java.util.List;

/**
 * Generates a list of actions from the output of the algorithms.
 * <p>
 * This handler is useful to capture the operations resulting from a diff.
 *
 * @author Christophe Lauret
 * @version 0.9.0
 * @see OperationsBuffer
 */
public class ActionsBuffer implements DiffHandler {

  /**
   * The list of actions produced by this handler.
   */
  private final List<Action> actions = new ArrayList<>();

  /**
   * The action used in the last operation.
   */
  private Action action = null;

  @Override
  public void handle(Operator operator, Token token) {
    setupAction(operator);
    this.action.add(token);
  }

  /**
   * @return the list of actions generated by this formatter.
   */
  public List<Action> getActions() {
    return this.actions;
  }

  /**
   * Sets up the action prior to handling the operation.
   *
   * <p>If the action does not exist or is of a different type, create a new one
   * and add to the list of actions.
   *
   * @param operator The type of action.
   */
  private void setupAction(Operator operator) {
    if (this.action == null || this.action.operator() != operator) {
      this.action = new Action(operator);
      this.actions.add(this.action);
    }
  }

  @Override
  public String toString() {
    return "ActionsBuffer";
  }

}
